package app;

import app.math.LongArithmethic;
import app.math.LongArithmeticImplList;
import app.math.LongArithmeticMath;
import com.carrotsearch.junitbenchmarks.AbstractBenchmark;
import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
import config.WebConfig;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestRule;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;
import testconfig.TestConfig;
import testconfig.TestSecurityConfig;

import java.io.IOException;
import java.sql.SQLException;

import static org.junit.Assert.assertEquals;

@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration(classes = {WebConfig.class, TestConfig.class, TestSecurityConfig.class})

public class MathTest extends AbstractBenchmark {


    @Autowired
    private WebApplicationContext wac;
    private MockMvc mockMvc;

    @Before
    public void init(){
        mockMvc = MockMvcBuilders.webAppContextSetup(wac)
                .apply(SecurityMockMvcConfigurers.springSecurity()).build();
    }

    @Test
    public void mulTest() throws IOException {
        LongArithmethic first = new LongArithmeticImplList("23456789093467578647823642836427346893462367462174263642737474234723904723894723784263894263478237489236489237542346723784693047582637894236489237480237423074238947238962389427394823748923748023642304723894");
        System.out.println(first.getLength());
      //  for (int i=0;i<50;++i)
        assertEquals(LongArithmeticMath.mul(first,
                new LongArithmeticImplList("23456789093467578647823642836427346893462367462174263642737474234723904723894723784263894263478237489236489245345343754234672378469303534534534553475826378942364892374802374242378423647823678433748023642304723894")).toString(),
                new LongArithmeticImplList("550220954575419550101997256737973733610805258055862374118059094086455982057203679283629972527264532427072703547121060697659436970710624792843502405084583904694067306292957480312309857910749866361558741628993222727231876399235862536229846132144816169320317385054907038627669377368358810749891826194090114654193207810539656113592656542749136496214838296477022851074395195783267382528052574054449269782081460547574523236").toString());
    }

    @Test
    public void newMulTest() throws IOException {
        //for (int i=0;i<50;++i)
        assertEquals(LongArithmeticMath.newMul(new LongArithmeticImplList("23456789093467578647823642836427346893462367462174263642737474234723904723894723784263894263478237489236489237542346723784693047582637894236489237480237423074238947238962389427394823748923748023642304723894"),
                new LongArithmeticImplList("23456789093467578647823642836427346893462367462174263642737474234723904723894723784263894263478237489236489245345343754234672378469303534534534553475826378942364892374802374242378423647823678433748023642304723894")).toString(),
                new LongArithmeticImplList("550220954575419550101997256737973733610805258055862374118059094086455982057203679283629972527264532427072703547121060697659436970710624792843502405084583904694067306292957480312309857910749866361558741628993222727231876399235862536229846132144816169320317385054907038627669377368358810749891826194090114654193207810539656113592656542749136496214838296477022851074395195783267382528052574054449269782081460547574523236").toString());
    }
//MathTest.futureAdvTest: [measured 10 out of 15 rounds, threads: 1 (sequential)]
// round: 0.01 [+- 0.01], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 1, GC.time: 0.01, time.total: 0.34, time.warmup: 0.20, time.bench: 0.15
    @Test
    public void futureTest() throws IOException {
       // for (int i=0;i<50;++i)
            assertEquals(LongArithmeticMath.futureMul(new LongArithmeticImplList("23456789093467578647823642836427346893462367462174263642737474234723904723894723784263894263478237489236489237542346723784693047582637894236489237480237423074238947238962389427394823748923748023642304723894"),
                    new LongArithmeticImplList("23456789093467578647823642836427346893462367462174263642737474234723904723894723784263894263478237489236489245345343754234672378469303534534534553475826378942364892374802374242378423647823678433748023642304723894")).toString(),
                    new LongArithmeticImplList("550220954575419550101997256737973733610805258055862374118059094086455982057203679283629972527264532427072703547121060697659436970710624792843502405084583904694067306292957480312309857910749866361558741628993222727231876399235862536229846132144816169320317385054907038627669377368358810749891826194090114654193207810539656113592656542749136496214838296477022851074395195783267382528052574054449269782081460547574523236").toString());
    }


    @Test
    //@BenchmarkOptions(concurrency = 1, warmupRounds = 0, benchmarkRounds = 5)
    public void futureAdvTest() throws IOException {
            assertEquals(LongArithmeticMath.futureMulAdv(new LongArithmeticImplList("23456789093467578647823642836427346893462367462174263642737474234723904723894723784263894263478237489236489237542346723784693047582637894236489237480237423074238947238962389427394823748923748023642304723894"),
                    new LongArithmeticImplList("23456789093467578647823642836427346893462367462174263642737474234723904723894723784263894263478237489236489245345343754234672378469303534534534553475826378942364892374802374242378423647823678433748023642304723894")).toString(),
                    new LongArithmeticImplList("550220954575419550101997256737973733610805258055862374118059094086455982057203679283629972527264532427072703547121060697659436970710624792843502405084583904694067306292957480312309857910749866361558741628993222727231876399235862536229846132144816169320317385054907038627669377368358810749891826194090114654193207810539656113592656542749136496214838296477022851074395195783267382528052574054449269782081460547574523236").toString());
    }

    @Test
    public void future2AdvTest() throws IOException {
        LongArithmeticImplList dig1=new LongArithmeticImplList("23423423423423212312321312321");
        LongArithmeticImplList dig2=new LongArithmeticImplList("2342341234534234332324");
        //for (int i=0;i<50;++i)
            assertEquals(LongArithmeticMath.futureMulAdv(dig1,dig2).toString(),LongArithmeticMath.mul(dig1,dig2).toString());
    }
}
